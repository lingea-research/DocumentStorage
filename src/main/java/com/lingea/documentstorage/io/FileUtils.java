package com.lingea.documentstorage.io;

import java.io.RandomAccessFile;
import java.io.IOException;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

/**
 * Static class with functions for reading and writing to files.
 * Note: functions have been generated by ChatGPT and minimally modified!
 */
class FileUtils {

    /**
     * Appends a string to the end of a text file.
     * 
     * @param fileName The name of the text file.
     * @param content The string to be appended to the text file.
     * @throws IOException If an I/O error occurs while writing to the file.
     */
    public static void appendToFile(String fileName, String content) throws IOException {
        BufferedWriter writer = null;
        try {
            FileWriter fileWriter = new FileWriter(fileName, true);
            writer = new BufferedWriter(fileWriter);
            writer.write(content);
            writer.newLine();
        } finally {
            if (writer != null) {
                writer.close();
            }
        }
    }

    /**
     * Reads a text file and stores the lines in a list.
     * 
     * @param fileName The name of the text file.
     * @return A list containing the lines read from the text file.
     * @throws IOException If an I/O error occurs while reading the file.
     */
    public static List<String> readLinesFromFile(String fileName) throws IOException {
        List<String> lines = new ArrayList<>();
        BufferedReader reader = null;
        try {
            FileReader fileReader = new FileReader(fileName);
            reader = new BufferedReader(fileReader);
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }
        } finally {
            if (reader != null) {
                reader.close();
            }
        }
        return lines;
    }

    /**
     * Simple function for reading bytes from a random access file.
     * @param filename - path to the binary file to read
     * @param start - byte offset where to start reading
     * @param end - byte offset where to stop reading
     * @return - read byte array
     * @throws IOException
     */
    public static byte[] readBytesFromRAF(String filename, long start, long end) throws IOException {
        RandomAccessFile raf = null;
        byte[] byteArray;
        try {
            raf = new RandomAccessFile(filename, "r");
            int length = (int) (end - start);
            byteArray = new byte[length];
            raf.seek(start);
            raf.read(byteArray);
        } finally {
            if (raf != null) {
                raf.close();
            }
        }
        return byteArray;
    }

    /**
     * Simple function for writing bytes to random access file.
     * @param filename - path to the file
     * @param byteArray - byte array to write
     * @throws IOException
     */
    public static void writeBytesToRAF(String filename, long offset, byte[] byteArray) throws IOException {
        RandomAccessFile raf = null;
        try {
            raf = new RandomAccessFile(filename, "rw");
            raf.seek(offset);
            raf.write(byteArray);
        } finally {
            if (raf != null) {
                raf.close();
            }
        }
    }

    /**
     * Simple function for writing bytes to the end of random access file.
     * @param filename - path to the file
     * @param byteArray - byte array to write
     * @throws IOException
     */
    public static void writeBytesToEndOfRAF(String filename, byte[] byteArray) throws IOException {
        RandomAccessFile raf = null;
        try {
            raf = new RandomAccessFile(filename, "rw");
            raf.seek(raf.length());
            raf.write(byteArray);
        } finally {
            if (raf != null) {
                raf.close();
            }
        }
    }
}
